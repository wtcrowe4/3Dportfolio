/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Scott VanArsdale (https://sketchfab.com/vanart)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/golf-ball-b0b50a16aa5d431e8ed799c1a413025c
Title: Golf Ball
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";

import golfBall from "../assets/3D/golf_ball.glb";

const Golfball = ({isRotating, setIsRotating, ...props}) => {
  const golfBallRef = useRef();
  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(golfBall);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const handlePointerDown = (e) => {
    lastX.current = e.clientX;
    setIsRotating(true);
  } 
  const handlePointerUp = (e) => {
    setIsRotating(false);
    e.stopProgation();
    e.preventDeafault();

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;

    const delta = clientX - lastX.current;
    rotationSpeed.current = delta / viewport.width;
    golfBallRef.rotation.y += rotationSpeed.current;
  }
  const handlePointerMove = (e) => {
    e.stopProgation();
    e.preventDeafault();
    // rotationSpeed.current = (e.clientX - lastX.current) / viewport.width;
    // lastX.current = e.clientX;
  }
  useFrame(() => {
    if (isRotating) {
      golfBallRef.current.rotation.y += rotationSpeed.current;
      rotationSpeed.current *= 0.95;
    }
  });



  return (
    <a.group {...props} ref={golfBallRef}>
      <a.group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh

          geometry={nodes.defaultMaterial.geometry}
          material={materials.initialShadingGroup}
          rotation={[Math.PI / 2, 0, 0]}
          
        />
      </a.group>
    </a.group>
  );
}

export default Golfball;
